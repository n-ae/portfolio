# Containerfile for Podman - ctx CLI testing
# Optimized for Podman features like buildah, better caching, and rootless containers

ARG BASE_IMAGE=alpine:3.22
FROM ${BASE_IMAGE} AS zig-base

# Install Zig and build dependencies using Alpine packages
RUN apk add --no-cache \
    zig \
    git \
    bash \
    zsh \
    fish \
    ca-certificates \
    && zig version

# Build stage
FROM zig-base AS builder

WORKDIR /build

# Copy dependency files first for better layer caching
COPY build.zig.zon build.zig ./

# Initialize Zig dependencies (cached layer)
RUN zig build --help > /dev/null || true

# Copy source files
COPY src/ ./src/
COPY scripts/ ./scripts/
COPY build.zig CLAUDE.md ./

# Build optimized release
RUN zig build --release=fast \
    && echo "âœ… Build completed successfully"

# Production runtime image
FROM ${BASE_IMAGE} AS runtime

LABEL org.opencontainers.image.title="ctx CLI"
LABEL org.opencontainers.image.description="Context Session Manager - CLI tool for saving and restoring development contexts"
LABEL org.opencontainers.image.source="https://github.com/username/ctx"
LABEL org.opencontainers.image.vendor="username"

# Install runtime dependencies
RUN apk add --no-cache \
    git \
    bash \
    zsh \
    fish

# Create non-root user for security
ARG USER_ID=1000
ARG GROUP_ID=1000
RUN addgroup -g ${GROUP_ID} ctx \
    && adduser -D -s /bin/bash -G ctx -u ${USER_ID} ctx

# Copy binaries from builder
COPY --from=builder --chown=ctx:ctx /build/zig-out/bin/ /usr/local/bin/

# Set up user environment
USER ctx
WORKDIR /home/ctx

# Initialize ctx directory
RUN mkdir -p /home/ctx/.ctx

# Verify installation
RUN ctx version && echo "âœ… ctx CLI ready"

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD ctx version || exit 1

ENTRYPOINT ["ctx"]
CMD ["--help"]

# Testing image with development tools
FROM builder AS testing

# Install testing and debugging tools
RUN apk add --no-cache \
    vim \
    tmux \
    htop \
    strace \
    valgrind \
    gdb

# Create test user
RUN addgroup -g 1000 tester \
    && adduser -D -s /bin/bash -G tester -u 1000 tester

# Set up test environment
USER tester
WORKDIR /home/tester

# Copy project for testing
COPY --from=builder --chown=tester:tester /build/ /home/tester/ctx/

WORKDIR /home/tester/ctx

# Run comprehensive tests on container start
CMD ["bash", "-c", "zig build test && zig build test-csv && echo 'ðŸŽ‰ All container tests passed!'"]

# Development image
FROM testing AS development

USER root

# Install additional development tools
RUN apk add --no-cache \
    clang \
    make \
    cmake \
    pkgconfig \
    musl-dev

USER tester
WORKDIR /home/tester/ctx

# Development shell
CMD ["/bin/bash"]
