# Multi-platform Containerfile for ctx CLI testing
# Enhanced cross-platform testing with multiple shell environments
# Primary focus on Linux with comprehensive shell support

# Platform args are automatically provided by the container engine
# ARG TARGETPLATFORM and ARG BUILDPLATFORM are built-in

###############################################################################
# Base image with Zig and comprehensive shell support
###############################################################################
FROM --platform=$BUILDPLATFORM alpine:3.22 AS zig-base

# Install Zig and all shell environments for comprehensive testing
RUN apk add --no-cache \
    zig \
    git \
    bash \
    zsh \
    fish \
    dash \
    mksh \
    tcsh \
    busybox \
    coreutils \
    findutils \
    && zig version

# Install additional tools that might be needed for cross-platform testing
RUN apk add --no-cache \
    curl \
    wget \
    tar \
    gzip \
    xz \
    ca-certificates \
    procps \
    util-linux

###############################################################################
# Builder stage
###############################################################################
FROM zig-base AS builder

WORKDIR /build

# Copy dependency files first for better layer caching
COPY build.zig.zon build.zig ./

# Initialize Zig dependencies (cached layer)
RUN zig build --help > /dev/null || true

COPY src/ ./src/
COPY scripts/ ./scripts/

# Build optimized release with platform-specific optimizations
RUN --mount=type=cache,target=/tmp/zig-cache,id=zig-cache-${TARGETPLATFORM} \
    zig build --release=fast \
    && echo "✅ Build completed successfully for ${TARGETPLATFORM}"

###############################################################################
# Testing Environment with Multiple Shell Support
###############################################################################
FROM zig-base AS blackbox-testing

WORKDIR /build
COPY --from=builder /build/zig-out/ /build/zig-out/
COPY --from=builder /build/src/ /build/src/
COPY --from=builder /build/scripts/ /build/scripts/
COPY --from=builder /build/build.zig /build/build.zig
COPY --from=builder /build/build.zig.zon /build/build.zig.zon

# Set platform-specific environment variables  
ENV PLATFORM=${TARGETPLATFORM}
ENV TEST_ENVIRONMENT=container

# Install additional development tools for comprehensive testing
RUN apk add --no-cache \
    strace \
    ltrace \
    gdb \
    valgrind \
    && echo "✅ Testing environment ready"

# Create shell testing scripts
RUN echo '#!/bin/bash' > /build/test-bash.sh && \
    echo 'echo "Testing with bash: $BASH_VERSION"' >> /build/test-bash.sh && \
    echo 'zig build test-blackbox' >> /build/test-bash.sh && \
    chmod +x /build/test-bash.sh

RUN echo '#!/bin/zsh' > /build/test-zsh.sh && \
    echo 'echo "Testing with zsh: $ZSH_VERSION"' >> /build/test-zsh.sh && \
    echo 'zig build test-blackbox' >> /build/test-zsh.sh && \
    chmod +x /build/test-zsh.sh

RUN echo '#!/usr/bin/fish' > /build/test-fish.sh && \
    echo 'echo "Testing with fish"' >> /build/test-fish.sh && \
    echo 'zig build test-blackbox' >> /build/test-fish.sh && \
    chmod +x /build/test-fish.sh

# Create comprehensive test runner
RUN echo '#!/bin/sh' > /build/run-comprehensive-tests.sh && \
    echo 'echo "=== Running comprehensive shell compatibility tests ==="' >> /build/run-comprehensive-tests.sh && \
    echo 'echo "Platform: $PLATFORM"' >> /build/run-comprehensive-tests.sh && \
    echo 'echo "Available shells:"' >> /build/run-comprehensive-tests.sh && \
    echo 'which bash zsh fish dash' >> /build/run-comprehensive-tests.sh && \
    echo 'echo ""' >> /build/run-comprehensive-tests.sh && \
    echo 'echo "=== Testing with sh ==="' >> /build/run-comprehensive-tests.sh && \
    echo 'zig build test-blackbox' >> /build/run-comprehensive-tests.sh && \
    echo 'echo "=== Testing with bash ==="' >> /build/run-comprehensive-tests.sh && \
    echo '/build/test-bash.sh' >> /build/run-comprehensive-tests.sh && \
    echo 'echo "=== Testing with zsh ==="' >> /build/run-comprehensive-tests.sh && \
    echo '/build/test-zsh.sh' >> /build/run-comprehensive-tests.sh && \
    echo 'echo "=== Testing with fish ==="' >> /build/run-comprehensive-tests.sh && \
    echo '/build/test-fish.sh' >> /build/run-comprehensive-tests.sh && \
    echo 'echo "=== All shell tests completed ==="' >> /build/run-comprehensive-tests.sh && \
    chmod +x /build/run-comprehensive-tests.sh

###############################################################################
# Enhanced Runtime for Production
###############################################################################
FROM alpine:3.22 AS runtime

LABEL org.opencontainers.image.title="ctx"
LABEL org.opencontainers.image.description="Context Session Manager - CLI tool for saving and restoring development contexts"
LABEL org.opencontainers.image.source="https://github.com/n-ae/portfolio"
LABEL org.opencontainers.image.vendor="n-ae"

# Create non-root user for security
ARG USER_ID=1000
ARG GROUP_ID=1000
RUN addgroup -g ${GROUP_ID} ctx \
    && adduser -D -s /bin/sh -G ctx -u ${USER_ID} ctx

# Install minimal runtime dependencies
RUN apk add --no-cache \
    bash \
    git

# Copy binaries from builder
COPY --from=builder --chown=ctx:ctx /build/zig-out/bin/ /usr/local/bin/

# Set up user environment
USER ctx
WORKDIR /home/ctx

# Verify installation
RUN ctx version && echo "✅ ctx CLI ready"

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD ctx version || exit 1

ENTRYPOINT ["ctx"]
CMD ["--help"]

###############################################################################
# Platform simulation stages (for future Windows/macOS container support)
###############################################################################

# Windows-like testing environment (using Wine on Linux)
FROM blackbox-testing AS windows-sim
RUN apk add --no-cache wine && \
    echo "✅ Windows simulation environment ready (Wine)"

# macOS-like testing environment (with macOS-style tools)
FROM blackbox-testing AS macos-sim
RUN apk add --no-cache \
    coreutils \
    findutils \
    grep \
    sed \
    awk \
    && ln -sf /usr/bin/gawk /usr/bin/awk \
    && echo "✅ macOS-like environment ready"

###############################################################################
# Default testing stage
###############################################################################
FROM blackbox-testing AS testing

# Default command runs comprehensive tests
CMD ["/build/run-comprehensive-tests.sh"]